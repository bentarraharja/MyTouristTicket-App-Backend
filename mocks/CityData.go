// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	city "my-tourist-ticket/features/city"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// CityData is an autogenerated mock type for the CityDataInterface type
type CityData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: cityId
func (_m *CityData) Delete(cityId int) error {
	ret := _m.Called(cityId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(cityId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserRoleById provides a mock function with given fields: userId
func (_m *CityData) GetUserRoleById(userId int) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoleById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: input, image, thumbnail
func (_m *CityData) Insert(input city.Core, image *multipart.FileHeader, thumbnail *multipart.FileHeader) error {
	ret := _m.Called(input, image, thumbnail)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(city.Core, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r0 = rf(input, image, thumbnail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllCity provides a mock function with given fields: page, limit
func (_m *CityData) SelectAllCity(page int, limit int) ([]city.Core, int, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllCity")
	}

	var r0 []city.Core
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]city.Core, int, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []city.Core); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]city.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectCityById provides a mock function with given fields: cityId
func (_m *CityData) SelectCityById(cityId int) (city.Core, error) {
	ret := _m.Called(cityId)

	if len(ret) == 0 {
		panic("no return value specified for SelectCityById")
	}

	var r0 city.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (city.Core, error)); ok {
		return rf(cityId)
	}
	if rf, ok := ret.Get(0).(func(int) city.Core); ok {
		r0 = rf(cityId)
	} else {
		r0 = ret.Get(0).(city.Core)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(cityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: cityId, input, image, thumbnail
func (_m *CityData) Update(cityId int, input city.Core, image *multipart.FileHeader, thumbnail *multipart.FileHeader) error {
	ret := _m.Called(cityId, input, image, thumbnail)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, city.Core, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r0 = rf(cityId, input, image, thumbnail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCityData creates a new instance of CityData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCityData(t interface {
	mock.TestingT
	Cleanup(func())
}) *CityData {
	mock := &CityData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
