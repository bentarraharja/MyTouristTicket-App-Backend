// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	booking "my-tourist-ticket/features/booking"

	mock "github.com/stretchr/testify/mock"
)

// BookingData is an autogenerated mock type for the BookingDataInterface type
type BookingData struct {
	mock.Mock
}

// CancelBooking provides a mock function with given fields: userIdLogin, orderId, bookingCore
func (_m *BookingData) CancelBooking(userIdLogin int, orderId string, bookingCore booking.Core) error {
	ret := _m.Called(userIdLogin, orderId, bookingCore)

	if len(ret) == 0 {
		panic("no return value specified for CancelBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, booking.Core) error); ok {
		r0 = rf(userIdLogin, orderId, bookingCore)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBookingReview provides a mock function with given fields: tourId, limit
func (_m *BookingData) GetAllBookingReview(tourId int, limit int) ([]booking.ReviewCore, error) {
	ret := _m.Called(tourId, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBookingReview")
	}

	var r0 []booking.ReviewCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]booking.ReviewCore, error)); ok {
		return rf(tourId, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []booking.ReviewCore); ok {
		r0 = rf(tourId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]booking.ReviewCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(tourId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAverageTourReview provides a mock function with given fields: tourId
func (_m *BookingData) GetAverageTourReview(tourId int) (float64, error) {
	ret := _m.Called(tourId)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageTourReview")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (float64, error)); ok {
		return rf(tourId)
	}
	if rf, ok := ret.Get(0).(func(int) float64); ok {
		r0 = rf(tourId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(tourId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalTourReview provides a mock function with given fields: tourId
func (_m *BookingData) GetTotalTourReview(tourId int) (int, error) {
	ret := _m.Called(tourId)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalTourReview")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(tourId)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(tourId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(tourId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoleById provides a mock function with given fields: userId
func (_m *BookingData) GetUserRoleById(userId int) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoleById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertBooking provides a mock function with given fields: userIdLogin, inputBooking
func (_m *BookingData) InsertBooking(userIdLogin int, inputBooking booking.Core) (*booking.Core, error) {
	ret := _m.Called(userIdLogin, inputBooking)

	if len(ret) == 0 {
		panic("no return value specified for InsertBooking")
	}

	var r0 *booking.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int, booking.Core) (*booking.Core, error)); ok {
		return rf(userIdLogin, inputBooking)
	}
	if rf, ok := ret.Get(0).(func(int, booking.Core) *booking.Core); ok {
		r0 = rf(userIdLogin, inputBooking)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*booking.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, booking.Core) error); ok {
		r1 = rf(userIdLogin, inputBooking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertBookingReview provides a mock function with given fields: inputReview
func (_m *BookingData) InsertBookingReview(inputReview booking.ReviewCore) error {
	ret := _m.Called(inputReview)

	if len(ret) == 0 {
		panic("no return value specified for InsertBookingReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(booking.ReviewCore) error); ok {
		r0 = rf(inputReview)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllBooking provides a mock function with given fields: page, limit
func (_m *BookingData) SelectAllBooking(page int, limit int) ([]booking.Core, int, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllBooking")
	}

	var r0 []booking.Core
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]booking.Core, int, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []booking.Core); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]booking.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectAllBookingPengelola provides a mock function with given fields: pengelolaID, page, limit
func (_m *BookingData) SelectAllBookingPengelola(pengelolaID int, page int, limit int) ([]booking.Core, int, error) {
	ret := _m.Called(pengelolaID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllBookingPengelola")
	}

	var r0 []booking.Core
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]booking.Core, int, error)); ok {
		return rf(pengelolaID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []booking.Core); ok {
		r0 = rf(pengelolaID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]booking.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(pengelolaID, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, int) error); ok {
		r2 = rf(pengelolaID, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectBookingUser provides a mock function with given fields: userIdLogin
func (_m *BookingData) SelectBookingUser(userIdLogin int) ([]booking.Core, error) {
	ret := _m.Called(userIdLogin)

	if len(ret) == 0 {
		panic("no return value specified for SelectBookingUser")
	}

	var r0 []booking.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]booking.Core, error)); ok {
		return rf(userIdLogin)
	}
	if rf, ok := ret.Get(0).(func(int) []booking.Core); ok {
		r0 = rf(userIdLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]booking.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userIdLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectBookingUserDetail provides a mock function with given fields: userIdLogin, bookingId
func (_m *BookingData) SelectBookingUserDetail(userIdLogin int, bookingId string) (*booking.Core, error) {
	ret := _m.Called(userIdLogin, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for SelectBookingUserDetail")
	}

	var r0 *booking.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*booking.Core, error)); ok {
		return rf(userIdLogin, bookingId)
	}
	if rf, ok := ret.Get(0).(func(int, string) *booking.Core); ok {
		r0 = rf(userIdLogin, bookingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*booking.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userIdLogin, bookingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhoocksData provides a mock function with given fields: reqNotif
func (_m *BookingData) WebhoocksData(reqNotif booking.Core) error {
	ret := _m.Called(reqNotif)

	if len(ret) == 0 {
		panic("no return value specified for WebhoocksData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(booking.Core) error); ok {
		r0 = rf(reqNotif)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBookingData creates a new instance of BookingData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingData(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingData {
	mock := &BookingData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
