// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	packages "my-tourist-ticket/features/package"

	mock "github.com/stretchr/testify/mock"
)

// PackageData is an autogenerated mock type for the PackageDataInterface type
type PackageData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: packageId
func (_m *PackageData) Delete(packageId int) error {
	ret := _m.Called(packageId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(packageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBenefits provides a mock function with given fields: packageId
func (_m *PackageData) DeleteBenefits(packageId int) error {
	ret := _m.Called(packageId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBenefits")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(packageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: benefits, input
func (_m *PackageData) Insert(benefits []string, input packages.Core) error {
	ret := _m.Called(benefits, input)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, packages.Core) error); ok {
		r0 = rf(benefits, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllBenefitsByPackageId provides a mock function with given fields: packageId
func (_m *PackageData) SelectAllBenefitsByPackageId(packageId int) ([]packages.BenefitCore, error) {
	ret := _m.Called(packageId)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllBenefitsByPackageId")
	}

	var r0 []packages.BenefitCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]packages.BenefitCore, error)); ok {
		return rf(packageId)
	}
	if rf, ok := ret.Get(0).(func(int) []packages.BenefitCore); ok {
		r0 = rf(packageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]packages.BenefitCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(packageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByTourId provides a mock function with given fields: tourId
func (_m *PackageData) SelectByTourId(tourId uint) ([]packages.Core, error) {
	ret := _m.Called(tourId)

	if len(ret) == 0 {
		panic("no return value specified for SelectByTourId")
	}

	var r0 []packages.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]packages.Core, error)); ok {
		return rf(tourId)
	}
	if rf, ok := ret.Get(0).(func(uint) []packages.Core); ok {
		r0 = rf(tourId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]packages.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(tourId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPackageData creates a new instance of PackageData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackageData(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackageData {
	mock := &PackageData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
