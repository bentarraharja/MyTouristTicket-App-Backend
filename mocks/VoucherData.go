// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	voucher "my-tourist-ticket/features/voucher"

	mock "github.com/stretchr/testify/mock"
)

// VoucherData is an autogenerated mock type for the VoucherDataInterface type
type VoucherData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: voucherId
func (_m *VoucherData) Delete(voucherId int) error {
	ret := _m.Called(voucherId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(voucherId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserRoleById provides a mock function with given fields: userId
func (_m *VoucherData) GetUserRoleById(userId int) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoleById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: input
func (_m *VoucherData) Insert(input voucher.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(voucher.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllVoucher provides a mock function with given fields: userRole
func (_m *VoucherData) SelectAllVoucher(userRole string) ([]voucher.Core, error) {
	ret := _m.Called(userRole)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllVoucher")
	}

	var r0 []voucher.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]voucher.Core, error)); ok {
		return rf(userRole)
	}
	if rf, ok := ret.Get(0).(func(string) []voucher.Core); ok {
		r0 = rf(userRole)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]voucher.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: voucherId, input
func (_m *VoucherData) Update(voucherId int, input voucher.Core) error {
	ret := _m.Called(voucherId, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, voucher.Core) error); ok {
		r0 = rf(voucherId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVoucherData creates a new instance of VoucherData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVoucherData(t interface {
	mock.TestingT
	Cleanup(func())
}) *VoucherData {
	mock := &VoucherData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
