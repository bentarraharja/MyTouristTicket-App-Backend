// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	tour "my-tourist-ticket/features/tour"
)

// TourData is an autogenerated mock type for the TourDataInterface type
type TourData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tourId
func (_m *TourData) Delete(tourId int) error {
	ret := _m.Called(tourId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(tourId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTourByCityID provides a mock function with given fields: cityID, page, limit
func (_m *TourData) GetTourByCityID(cityID uint, page int, limit int) ([]tour.Core, int, error) {
	ret := _m.Called(cityID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTourByCityID")
	}

	var r0 []tour.Core
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]tour.Core, int, error)); ok {
		return rf(cityID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []tour.Core); ok {
		r0 = rf(cityID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tour.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) int); ok {
		r1 = rf(cityID, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int) error); ok {
		r2 = rf(cityID, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserRoleById provides a mock function with given fields: userId
func (_m *TourData) GetUserRoleById(userId int) (string, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoleById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: userId, input, image, thumbnail
func (_m *TourData) Insert(userId uint, input tour.Core, image *multipart.FileHeader, thumbnail *multipart.FileHeader) error {
	ret := _m.Called(userId, input, image, thumbnail)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, tour.Core, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r0 = rf(userId, input, image, thumbnail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertReportTour provides a mock function with given fields: userId, tourId, input
func (_m *TourData) InsertReportTour(userId int, tourId int, input tour.ReportCore) error {
	ret := _m.Called(userId, tourId, input)

	if len(ret) == 0 {
		panic("no return value specified for InsertReportTour")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, tour.ReportCore) error); ok {
		r0 = rf(userId, tourId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchTour provides a mock function with given fields: query
func (_m *TourData) SearchTour(query string) ([]tour.Core, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for SearchTour")
	}

	var r0 []tour.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]tour.Core, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []tour.Core); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tour.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllTour provides a mock function with given fields: page, limit
func (_m *TourData) SelectAllTour(page int, limit int) ([]tour.Core, int, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllTour")
	}

	var r0 []tour.Core
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]tour.Core, int, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []tour.Core); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tour.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectReportTour provides a mock function with given fields: tourId
func (_m *TourData) SelectReportTour(tourId int) ([]tour.ReportCore, error) {
	ret := _m.Called(tourId)

	if len(ret) == 0 {
		panic("no return value specified for SelectReportTour")
	}

	var r0 []tour.ReportCore
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]tour.ReportCore, error)); ok {
		return rf(tourId)
	}
	if rf, ok := ret.Get(0).(func(int) []tour.ReportCore); ok {
		r0 = rf(tourId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tour.ReportCore)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(tourId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectTourById provides a mock function with given fields: tourId
func (_m *TourData) SelectTourById(tourId int) (tour.Core, error) {
	ret := _m.Called(tourId)

	if len(ret) == 0 {
		panic("no return value specified for SelectTourById")
	}

	var r0 tour.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (tour.Core, error)); ok {
		return rf(tourId)
	}
	if rf, ok := ret.Get(0).(func(int) tour.Core); ok {
		r0 = rf(tourId)
	} else {
		r0 = ret.Get(0).(tour.Core)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(tourId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectTourByPengelola provides a mock function with given fields: userId, page, limit
func (_m *TourData) SelectTourByPengelola(userId int, page int, limit int) ([]tour.Core, int, error) {
	ret := _m.Called(userId, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for SelectTourByPengelola")
	}

	var r0 []tour.Core
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]tour.Core, int, error)); ok {
		return rf(userId, page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []tour.Core); ok {
		r0 = rf(userId, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tour.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(userId, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, int) error); ok {
		r2 = rf(userId, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: tourId, input, image, thumbnail
func (_m *TourData) Update(tourId int, input tour.Core, image *multipart.FileHeader, thumbnail *multipart.FileHeader) error {
	ret := _m.Called(tourId, input, image, thumbnail)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, tour.Core, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r0 = rf(tourId, input, image, thumbnail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTourData creates a new instance of TourData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTourData(t interface {
	mock.TestingT
	Cleanup(func())
}) *TourData {
	mock := &TourData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
